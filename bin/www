#!/usr/bin/env node

/**
 * 모듈 의존성 설정
 */

var app = require('../app');
var debug = require('debug')('mycoronamap:server');
var http = require('http');
const mongoose = require("mongoose");
const userConfig = require("../config/userConfig.json");

let db = mongoose.connection;
db.on("error", console.error);
db.once("open", () => {
  console.log("MongoDB 서버에 연결되었습니다");
});

mongoose.connect('mongodb+srv://joonhai:<db_password>@map.iuuki.mongodb.net/?retryWrites=true&w=majority&appName=map', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

/**
 * 환경 변수에서 포트를 가져와 Express에 저장
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * HTTP 서버 생성
 */

var server = http.createServer(app);

/**
 * 모든 네트워크 인터페이스에서 제공된 포트를 통해 서버 리스닝
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 포트를 숫자, 문자열 또는 false로 변환
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // 이름이 지정된 파이프
    return val;
  }

  if (port >= 0) {
    // 포트 번호
    return port;
  }

  return false;
}

/**
 * HTTP 서버 "error" 이벤트에 대한 이벤트 리스너
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 특정 리스닝 오류를 친절한 메시지로 처리
  switch (error.code) {
    case 'EACCES':
      console.error(bind + '는 권한이 필요합니다');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + '는 이미 사용 중입니다');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * HTTP 서버 "listening" 이벤트에 대한 이벤트 리스너
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
